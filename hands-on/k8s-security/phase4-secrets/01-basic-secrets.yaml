# 基本的なSecrets作成と管理
# 各種Secretsタイプの作成例とセキュアな管理方法
---
# 一般的なアプリケーション用Secret
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets
  namespace: security-demo
  labels:
    app: demo-app
    type: application-secrets
  annotations:
    description: "アプリケーション用機密データ"
    aws-ecs-equivalent: "ECS Task Definition secrets from Secrets Manager"
type: Opaque
data:
  # データベース接続情報
  # db-username: appuser (base64エンコード)
  # db-password: securepass123 (base64エンコード)
  # db-host: db.example.com (base64エンコード)
  db-username: YXBwdXNlcg==
  db-password: c2VjdXJlcGFzczEyMw==
  db-host: ZGIuZXhhbXBsZS5jb20=
  
  # API キー
  # api-key: sk-1234567890abcdef (base64エンコード)
  # jwt-secret: my-jwt-secret-key (base64エンコード)
  api-key: c2stMTIzNDU2Nzg5MGFiY2RlZg==
  jwt-secret: bXktand0LXNlY3JldC1rZXk=
  
  # 暗号化キー
  # encryption-key: 32-byte-encryption-key-here (base64エンコード)
  encryption-key: MzItYnl0ZS1lbmNyeXB0aW9uLWtleS1oZXJl

---
# データベース専用Secret
apiVersion: v1
kind: Secret
metadata:
  name: database-credentials
  namespace: security-demo
  labels:
    app: database
    type: database-credentials
  annotations:
    description: "データベース認証情報"
    aws-ecs-equivalent: "RDS credentials from Secrets Manager"
type: Opaque
data:
  # PostgreSQL接続情報
  # POSTGRES_USER: pguser (base64エンコード)
  # POSTGRES_PASSWORD: pgpass456 (base64エンコード)
  # POSTGRES_DB: appdb (base64エンコード)
  POSTGRES_USER: cGd1c2Vy
  POSTGRES_PASSWORD: cGdwYXNzNDU2
  POSTGRES_DB: YXBwZGI=
  
  # 接続URL
  # DATABASE_URL: postgresql://pguser:pgpass456@database-service:5432/appdb
  DATABASE_URL: cG9zdGdyZXNxbDovL3BndXNlcjpwZ3Bhc3M0NTZAZGF0YWJhc2Utc2VydmljZTo1NDMyL2FwcGRi

---
# 外部サービス用Secret
apiVersion: v1
kind: Secret
metadata:
  name: external-service-keys
  namespace: security-demo
  labels:
    app: external-integration
    type: service-credentials
  annotations:
    description: "外部サービス認証キー"
    aws-ecs-equivalent: "External API keys from Parameter Store"
type: Opaque
data:
  # AWS認証情報（External Secrets使用時）
  # aws-access-key-id: AKIAIOSFODNN7EXAMPLE (base64エンコード)
  # aws-secret-access-key: wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY (base64エンコード)
  aws-access-key-id: QUtJQUlPU0ZPRE5ON0VYQU1QTEU=
  aws-secret-access-key: d0phbHJYVXRuRkVNSS9LN01ERU5HL2JQeFJmaUNZRVhBTVBMRUtFWQ==
  
  # Slack Webhook URL
  # slack-webhook: https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX
  slack-webhook: aHR0cHM6Ly9ob29rcy5zbGFjay5jb20vc2VydmljZXMvVDAwMDAwMDAwL0IwMDAwMDAwMC9YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhY
  
  # GitHub Token
  # github-token: ghp_xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx
  github-token: Z2hwX3h4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4eHh4

---
# TLS証明書用Secret（自己署名証明書の例）
apiVersion: v1
kind: Secret
metadata:
  name: tls-certificate
  namespace: security-demo
  labels:
    app: web-server
    type: tls-certificate
  annotations:
    description: "TLS証明書とプライベートキー"
    aws-ecs-equivalent: "ACM certificate or custom certificate"
type: kubernetes.io/tls
data:
  # 自己署名証明書（実際の本番環境では適切な証明書を使用）
  tls.crt: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURMakNDQWhZQ0NRQzZ6MU1NVG1SOXpEQU5CZ2txaGtpRzl3MEJBUXNGQURBek1Rc3dDUVlEVlFRR0V3SkQKVGpFUE1BMEdBMVVFQ0F3R1FtVnBhbWx1WnpFUE1BMEdBMVVFQnd3R1FtVnBhbWx1WnpFUU1BNEdBMVVFQ2d3SApVM1YwWldOb2JqRU9NQXdHQTFVRUN3d0ZRM0pqWVhwcE1Ca1hEVEF4TURFeE9ERXlNRGcwT1ZvWERUTXdNRE14Ck56RXlNRGcwT1Zvd016RUxNQWtHQTFVRUJoTUNRMDR4RHpBTkJnTlZCQWdNQmtKbGFXcHBibWN4RHpBTkJnTlYKQkFjTUJrSmxhV3BwYm1jeEVEQU9CZ05WQkFvTUIxTjFkR1ZqYUc0eERqQU1CZ05WQkFzTUJVTnlZMkY2YVRFWU1CWUdBMVVFQXd3UGMzVjBaV05vYmk1bGVHRnRjR3hsTUlJQklqQU5CZ2txaGtpRzl3MEJBUUVGQUFPQgpBUThBTUlJQkNnS0NBUUVBM1BqSVRGMDBEU3JzcjJINm5iN1pUMHQ1QWRHWWFBR2lKUXNVQ2toM01aOGYzSEhXCkRQYTlOa1A2QnNYVTA5ZHJrS0RYUzJJZWJIc2xHRGJYNzNUUTY1VTBxOFd0NW4rYUYvSEY3b3o3VjBPbVBOdkcKWnJ3Vjg1T1pNZ2U1UkQrVDBWVXhNL0ZPeXZVKzdyTVNSR2ltMy8rUWJsYmU5ZEN5VitZNG5kRmRDK3pnK2RnTgpmbVN3aDVtaTRsdE1ERWdIME1WS0tNWFNyZkxMcjlPOXdrdFBtZUVwYmNqR1k4VnVSdmN6cVNSamhGZkI3TFV6Ck83M1l6RjNGaE1LUktDaGtOdVJpVHFOUzJvQnNvMFBpcHdqQkJzRGQ5WUEzejVFK3lHSStLRGI4c29VN1hCVEsKOWJMa0Q3NUhEKzJZOUNXeTIwaHJMSjJJNCtJY1ZoNmxrWkV6QlFJREFRQUJNQTBHQ1NxR1NJYjNEUUVCQ3dVQQpBNElCQVFDVnJTVGNxWXE3Rm8xNW54a1pUMXFETWs5SXhKZE5JSnArblZabTNWS2JRRGJaQ0Vhclhxb2xhOHBRCks5MnZ4eDJZUExQVkthWFZZOUF2eC9jY3dzS1F2QXhNY1F3VzVCOEhkbEVOOWQ2MVRSeDhGU2RvUW8xQWJNN0cKUGlEZTlFUE5JdXVTT29VYW9GcC9LaXhEV1JFZ2xJVU05d0dqTUVhNUdSdEMydldjaXIvbnJsY01lNmM0dHdqRgo3aWRwdUY1ZE5STExVcUZYZFpFekNwNHJxQ2ZNdjkwTkpqbnN1ZjFzNFZGbmJJK3pydzh5VHZNa3FvKy9HUllTCmNYakJzRlZuUXNOU2xxU3dZSElyejdyaElMY1BweThGSGQwVFd2cU5OY3pmT1BkNHFBQVBQNllDblc2WEJ5dUcKa2dVdklFWWJDM2xMcEo1d3NuVjhGNkl5QUw3NgotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0t
  tls.key: LS0tLS1CRUdJTiBQUklWQVRFIEtFWS0tLS0tCk1JSUV2UUlCQURBTkJna3Foa2lHOXcwQkFRRUZBQVNDQktjd2dnU2pBZ0VBQW9JQkFRRGMrTWhNWFRRTkt1eXYKWWZxZHZ0bFBTM2tCMFpob0FhSWxDeFFLU0hjeG54L2NjZFlNOXIwMlEvb0d4ZFRUMTJ1UW9OZEXJ0OW9SJLejKdSCtadnhYek03azJjM0VyNzRsYzBJQkFnV0ZCVSs0NzhwUU96akE5My9mTmlxME50UDVHTTQ3THoramRWd1pEegozK0Y3SVBNcC9JQ0pnL001L0J3YXN1b2k1V1ZUNGo0emM4Y2F6Z0NLbHRSRzUwNGFVaWVvOFhBTWZBVHFNQTVuCjJKOHkzMGtYd1dKUXlqM0oyMWZYMjBIODcrK3c4SHRma1k4K2RpdFFoT0N6TG91blBIZi94VjdhWEZzV0JQZnIKSWdFS24xSk9MUDU1UjVuNWFDUUp0cXI2MmlTWFREQUNJQ3hoSmpVQ1dJY2pzVkNqOWVjdlFRKzJ3M0lLQ3dvVAotLS0tLUVORCBQUklWQVRFIEtFWS0tLS0t

---
# Docker Registry認証用Secret
apiVersion: v1
kind: Secret
metadata:
  name: docker-registry-secret
  namespace: security-demo
  labels:
    app: container-registry
    type: registry-credentials
  annotations:
    description: "プライベートDockerレジストリ認証情報"
    aws-ecs-equivalent: "ECR authentication token"
type: kubernetes.io/dockerconfigjson
data:
  # Docker設定ファイル（base64エンコード）
  # 実際の認証情報に置き換えが必要
  .dockerconfigjson: eyJhdXRocyI6eyJwcml2YXRlLXJlZ2lzdHJ5LmV4YW1wbGUuY29tIjp7InVzZXJuYW1lIjoicmVnaXN0cnktdXNlciIsInBhc3N3b3JkIjoicmVnaXN0cnktcGFzc3dvcmQiLCJhdXRoIjoiY21WbmFYTjBjbmt0ZFhObGNqcHlaV2RwYzNSeWVTMXdZWE56ZDI5eVpBPT0ifX19

---
# ServiceAccount Token Secret（自動生成されるが、明示的作成例）
apiVersion: v1
kind: Secret
metadata:
  name: service-account-token
  namespace: security-demo
  labels:
    app: service-authentication
    type: service-account-token
  annotations:
    description: "ServiceAccount認証トークン"
    kubernetes.io/service-account.name: "default"
type: kubernetes.io/service-account-token

---
# 環境別Secret - 開発環境
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets-dev
  namespace: security-demo
  labels:
    app: demo-app
    environment: development
    type: environment-specific
  annotations:
    description: "開発環境用設定"
type: Opaque
data:
  # 開発環境用設定
  # environment: development (base64エンコード)
  # debug: true (base64エンコード)
  # log-level: debug (base64エンコード)
  environment: ZGV2ZWxvcG1lbnQ=
  debug: dHJ1ZQ==
  log-level: ZGVidWc=
  
  # 開発用データベース
  # dev-db-host: dev-db.example.com (base64エンコード)
  # dev-db-password: dev-password (base64エンコード)
  dev-db-host: ZGV2LWRiLmV4YW1wbGUuY29t
  dev-db-password: ZGV2LXBhc3N3b3Jk

---
# 環境別Secret - 本番環境
apiVersion: v1
kind: Secret
metadata:
  name: app-secrets-prod
  namespace: security-demo
  labels:
    app: demo-app
    environment: production
    type: environment-specific
  annotations:
    description: "本番環境用設定"
type: Opaque
data:
  # 本番環境用設定
  # environment: production (base64エンコード)
  # debug: false (base64エンコード)
  # log-level: info (base64エンコード)
  environment: cHJvZHVjdGlvbg==
  debug: ZmFsc2U=
  log-level: aW5mbw==
  
  # 本番用データベース
  # prod-db-host: prod-db.example.com (base64エンコード)
  # prod-db-password: secure-prod-password (base64エンコード)
  prod-db-host: cHJvZC1kYi5leGFtcGxlLmNvbQ==
  prod-db-password: c2VjdXJlLXByb2QtcGFzc3dvcmQ=

---
# 金融アプリケーション用Secret（高セキュリティ）
apiVersion: v1
kind: Secret
metadata:
  name: financial-app-secrets
  namespace: security-demo
  labels:
    app: financial-app
    security-level: high
    compliance: pci-dss
  annotations:
    description: "金融アプリケーション用機密データ"
    aws-ecs-equivalent: "High-security secrets with KMS encryption"
type: Opaque
data:
  # 暗号化キー（32バイト）
  # encryption-key-256: aaaabbbbccccddddeeeeffffgggghhhhiiiijjjjkkkkllll (base64エンコード)
  encryption-key-256: YWFhYWJiYmJjY2NjZGRkZGVlZWVmZmZmZ2dnZ2hoaGhpaWlpampqamtra2tsbGxs
  
  # JWT署名キー
  # jwt-signing-key: financial-jwt-secret-key-2023 (base64エンコード)
  jwt-signing-key: ZmluYW5jaWFsLWp3dC1zZWNyZXQta2V5LTIwMjM=
  
  # 決済処理API キー
  # payment-api-key: pk_live_xxxxxxxxxxxxxxxxxxxx (base64エンコード)
  # payment-secret-key: sk_live_yyyyyyyyyyyyyyyyyyyy (base64エンコード)
  payment-api-key: cGtfbGl2ZV94eHh4eHh4eHh4eHh4eHh4eHh4eHh4
  payment-secret-key: c2tfbGl2ZV95eXl5eXl5eXl5eXl5eXl5eXl5eXl5
