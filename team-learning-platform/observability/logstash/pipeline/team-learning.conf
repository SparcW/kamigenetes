# Logstash パイプライン設定
# チーム学習プラットフォームログの処理

input {
  # TCP ログ入力
  tcp {
    port => 5000
    codec => json_lines
    tags => ["tcp"]
  }

  # Beats ログ入力
  beats {
    port => 5044
    tags => ["beats"]
  }

  # HTTP ログ入力
  http {
    port => 8080
    codec => json
    tags => ["http"]
  }

  # ファイル入力（開発用）
  file {
    path => "/var/log/team-learning/*.log"
    start_position => "beginning"
    sincedb_path => "/var/lib/logstash/sincedb"
    codec => json
    tags => ["file"]
  }
}

filter {
  # 基本的なフィールド処理
  mutate {
    # タイムスタンプ正規化
    rename => { "timestamp" => "@timestamp" }
    
    # 不要フィールド削除
    remove_field => ["host", "agent", "ecs", "input"]
    
    # サービス名の統一
    gsub => [
      "service", "team-learning-backend", "backend",
      "service", "team-learning-frontend", "frontend",
      "service", "team-learning-docs", "markdown-server"
    ]
  }

  # 日付フィールド処理
  if [timestamp] {
    date {
      match => [ "timestamp", "ISO8601", "yyyy-MM-dd HH:mm:ss.SSS" ]
      target => "@timestamp"
    }
  }

  # ログレベル正規化
  if [level] {
    mutate {
      uppercase => [ "level" ]
    }
  }

  # トレース情報の処理
  if [trace_id] {
    mutate {
      add_field => { "trace.id" => "%{trace_id}" }
    }
  }

  if [span_id] {
    mutate {
      add_field => { "span.id" => "%{span_id}" }
    }
  }

  # HTTPリクエスト情報の処理
  if [http] {
    mutate {
      add_field => { "http.method" => "%{[http][method]}" }
      add_field => { "http.status_code" => "%{[http][status_code]}" }
      add_field => { "http.url" => "%{[http][url]}" }
      add_field => { "http.user_agent" => "%{[http][user_agent]}" }
    }
  }

  # エラー情報の処理
  if [error] {
    mutate {
      add_field => { "error.message" => "%{[error][message]}" }
      add_field => { "error.type" => "%{[error][type]}" }
      add_field => { "error.stack_trace" => "%{[error][stack_trace]}" }
    }
  }

  # ユーザー情報の処理（個人情報除去）
  if [user] {
    mutate {
      add_field => { "user.id" => "%{[user][id]}" }
      add_field => { "user.role" => "%{[user][role]}" }
      # 個人情報は保存しない
      remove_field => ["[user][email]", "[user][name]", "[user][password]"]
    }
  }

  # 学習関連情報の処理
  if [learning] {
    mutate {
      add_field => { "learning.course_id" => "%{[learning][course_id]}" }
      add_field => { "learning.progress" => "%{[learning][progress]}" }
      add_field => { "learning.action" => "%{[learning][action]}" }
    }
  }

  # パフォーマンス情報の処理
  if [performance] {
    mutate {
      add_field => { "performance.duration" => "%{[performance][duration]}" }
      add_field => { "performance.memory_usage" => "%{[performance][memory_usage]}" }
      add_field => { "performance.cpu_usage" => "%{[performance][cpu_usage]}" }
    }
  }

  # 地理情報の処理（GeoIP）
  if [client_ip] {
    geoip {
      source => "client_ip"
      target => "geoip"
      add_field => { "geoip.country" => "%{[geoip][country_name]}" }
      add_field => { "geoip.city" => "%{[geoip][city_name]}" }
    }
  }

  # 異常検知用フィールド
  if [level] == "ERROR" or [level] == "FATAL" {
    mutate {
      add_field => { "alert.severity" => "high" }
      add_field => { "alert.type" => "error" }
    }
  }

  if [http.status_code] and [http.status_code] >= 500 {
    mutate {
      add_field => { "alert.severity" => "medium" }
      add_field => { "alert.type" => "http_error" }
    }
  }

  # 最終的なフィールド整理
  mutate {
    # 環境情報追加
    add_field => { "environment" => "development" }
    add_field => { "platform" => "team-learning" }
    add_field => { "version" => "1.0.0" }
    
    # インデックス名設定
    add_field => { "[@metadata][index]" => "team-learning-logs-%{+YYYY.MM.dd}" }
  }
}

output {
  # Elasticsearch 出力
  elasticsearch {
    hosts => ["elasticsearch:9200"]
    index => "%{[@metadata][index]}"
    template_name => "team-learning-logs"
    template => "/etc/logstash/templates/team-learning-logs.json"
    template_overwrite => true
    
    # ドキュメント設定
    document_type => "_doc"
    
    # 性能設定
    workers => 2
    flush_size => 1000
    idle_flush_time => 10
  }

  # 標準出力（デバッグ用）
  stdout {
    codec => rubydebug
  }

  # ファイル出力（バックアップ用）
  file {
    path => "/var/log/logstash/team-learning-logs-%{+YYYY.MM.dd}.log"
    codec => json_lines
  }

  # 条件付きアラート出力
  if [alert] {
    http {
      url => "http://alertmanager:9093/api/v1/alerts"
      http_method => "post"
      format => "json"
      mapping => {
        "receiver" => "team-learning-alerts"
        "status" => "firing"
        "alerts" => [
          {
            "labels" => {
              "alertname" => "LogAlert"
              "severity" => "%{[alert][severity]}"
              "service" => "%{service}"
              "level" => "%{level}"
            }
            "annotations" => {
              "summary" => "%{message}"
              "description" => "Log alert from %{service}"
            }
            "generatorURL" => "http://kibana:5601"
          }
        ]
      }
    }
  }
}
