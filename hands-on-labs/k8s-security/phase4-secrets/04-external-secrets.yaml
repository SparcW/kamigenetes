# External Secrets Operator演習
# このファイルでは、External Secrets Operatorを使用して
# 外部のシークレット管理システム（例：AWS Secrets Manager）から
# Kubernetesのsecretsを自動的に同期する方法を学習します。

# 注意: この演習は実際のAWS Secrets Managerまたは他の外部システムが必要です。
# ここではデモ用の設定例を示します。

---
# External Secrets Operatorの名前空間
apiVersion: v1
kind: Namespace
metadata:
  name: external-secrets-system
  labels:
    name: external-secrets-system

---
# AWS Secrets Manager用の認証情報（実際の値は別途設定が必要）
apiVersion: v1
kind: Secret
metadata:
  name: aws-credentials
  namespace: k8s-security-demo
type: Opaque
data:
  # 実際のAWS認証情報をbase64エンコードして設定
  # echo -n "YOUR_ACCESS_KEY" | base64
  access-key: WU9VUl9BQ0NFU1NfS0VZ
  # echo -n "YOUR_SECRET_KEY" | base64
  secret-key: WU9VUl9TRUNSRVRfS0VZ

---
# AWS Secrets Manager用のSecretStore
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: aws-secrets-manager
  namespace: k8s-security-demo
spec:
  provider:
    aws:
      service: SecretsManager
      region: ap-northeast-1
      auth:
        secretRef:
          accessKey:
            name: aws-credentials
            key: access-key
          secretKey:
            name: aws-credentials
            key: secret-key

---
# HashiCorp Vault用のSecretStore（例）
apiVersion: external-secrets.io/v1beta1
kind: SecretStore
metadata:
  name: vault-backend
  namespace: k8s-security-demo
spec:
  provider:
    vault:
      server: "https://vault.example.com"
      path: "secret"
      version: "v2"
      auth:
        # Kubernetesサービスアカウント認証
        kubernetes:
          mountPath: "kubernetes"
          role: "external-secrets"
          serviceAccountRef:
            name: external-secrets-sa

---
# AWS Secrets ManagerからSecretsを同期するExternalSecret
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: database-external-secret
  namespace: k8s-security-demo
spec:
  refreshInterval: 5m
  secretStoreRef:
    name: aws-secrets-manager
    kind: SecretStore
  target:
    name: database-external-credentials
    creationPolicy: Owner
    template:
      type: Opaque
      data:
        username: "{{ .username }}"
        password: "{{ .password }}"
        host: "{{ .host }}"
        database: "{{ .database }}"
  data:
  - secretKey: username
    remoteRef:
      key: "prod/database"
      property: username
  - secretKey: password
    remoteRef:
      key: "prod/database"
      property: password
  - secretKey: host
    remoteRef:
      key: "prod/database"
      property: host
  - secretKey: database
    remoteRef:
      key: "prod/database"
      property: database

---
# VaultからAPI Keysを同期するExternalSecret
apiVersion: external-secrets.io/v1beta1
kind: ExternalSecret
metadata:
  name: api-keys-external-secret
  namespace: k8s-security-demo
spec:
  refreshInterval: 1h
  secretStoreRef:
    name: vault-backend
    kind: SecretStore
  target:
    name: api-keys-external
    creationPolicy: Owner
  data:
  - secretKey: openai-api-key
    remoteRef:
      key: "api-keys"
      property: openai
  - secretKey: stripe-api-key
    remoteRef:
      key: "api-keys"
      property: stripe

---
# External Secrets Operator用のServiceAccount
apiVersion: v1
kind: ServiceAccount
metadata:
  name: external-secrets-sa
  namespace: k8s-security-demo
  annotations:
    # AWS IAMロールとの連携（EKSの場合）
    eks.amazonaws.com/role-arn: arn:aws:iam::123456789012:role/ExternalSecretsRole

---
# External Secretsの状態を確認するテストPod
apiVersion: v1
kind: Pod
metadata:
  name: external-secrets-test
  namespace: k8s-security-demo
  labels:
    app: external-secrets-test
spec:
  containers:
  - name: test-client
    image: bitnami/kubectl:latest
    command:
    - /bin/bash
    - -c
    - |
      echo "=== External Secrets Operator テスト ==="
      
      # External Secrets Operatorがインストールされているかチェック
      echo "1. External Secrets Operatorの確認..."
      if kubectl get crd externalsecrets.external-secrets.io > /dev/null 2>&1; then
        echo "✓ External Secrets Operator CRDが見つかりました"
      else
        echo "✗ External Secrets Operator CRDが見つかりません"
        echo "以下のコマンドでインストールしてください:"
        echo "helm repo add external-secrets https://charts.external-secrets.io"
        echo "helm install external-secrets external-secrets/external-secrets -n external-secrets-system --create-namespace"
      fi
      
      # SecretStoreの確認
      echo "2. SecretStoreの状態確認..."
      kubectl get secretstore -n k8s-security-demo
      
      # ExternalSecretの確認
      echo "3. ExternalSecretの状態確認..."
      kubectl get externalsecret -n k8s-security-demo
      
      # 同期されたSecretsの確認
      echo "4. 同期されたSecretsの確認..."
      kubectl get secrets -n k8s-security-demo | grep external
      
      # External Secretsのイベント確認
      echo "5. External Secretsのイベント確認..."
      kubectl get events -n k8s-security-demo --field-selector reason=Synced
      
      # 詳細な状態確認（デバッグ用）
      echo "6. External Secretsの詳細状態..."
      for es in $(kubectl get externalsecret -n k8s-security-demo -o name); do
        echo "--- $es ---"
        kubectl describe $es -n k8s-security-demo
      done
      
      # 無限ループでPodを維持
      while true; do
        echo "External Secrets monitoring... $(date)"
        sleep 300  # 5分ごとに状態をチェック
      done
    resources:
      requests:
        memory: "64Mi"
        cpu: "50m"
      limits:
        memory: "128Mi"
        cpu: "100m"
  restartPolicy: Always
  serviceAccountName: secrets-demo-sa

---
# External Secretsを使用するアプリケーション例
apiVersion: apps/v1
kind: Deployment
metadata:
  name: app-with-external-secrets
  namespace: k8s-security-demo
spec:
  replicas: 1
  selector:
    matchLabels:
      app: app-external-secrets
  template:
    metadata:
      labels:
        app: app-external-secrets
    spec:
      containers:
      - name: app
        image: nginx:alpine
        env:
        # 外部システムから同期されたSecretsを環境変数として利用
        - name: DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: database-external-credentials
              key: username
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-external-credentials
              key: password
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: api-keys-external
              key: openai-api-key
        command:
        - /bin/sh
        - -c
        - |
          echo "=== External Secretsを利用するアプリケーション ==="
          echo "データベースユーザー名: $DB_USERNAME"
          echo "API Keyが設定されています: $([ -n "$OPENAI_API_KEY" ] && echo "Yes" || echo "No")"
          nginx -g "daemon off;"
        resources:
          requests:
            memory: "32Mi"
            cpu: "10m"
          limits:
            memory: "64Mi"
            cpu: "50m"

---
# External Secrets Operatorのインストール用ヘルパー
# 実際のインストールは以下のコマンドで実行してください:
#
# # Helmリポジトリの追加
# helm repo add external-secrets https://charts.external-secrets.io
# helm repo update
#
# # External Secrets Operatorのインストール
# helm install external-secrets external-secrets/external-secrets \
#   -n external-secrets-system \
#   --create-namespace
#
# # インストールの確認
# kubectl get pods -n external-secrets-system
# kubectl get crd | grep external-secrets
