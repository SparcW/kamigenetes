# AWS Application Load Balancer Ingress設定
# AWS Load Balancer Controllerを使用したALB統合

# 基本的なALB Ingress
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: webapp-alb-ingress
  namespace: webapp
  annotations:
    # ALB固有の設定
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}, {"HTTPS": 443}]'
    
    # SSL設定
    alb.ingress.kubernetes.io/ssl-redirect: '443'
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-west-2:ACCOUNT-ID:certificate/CERTIFICATE-ID
    
    # ヘルスチェック設定
    alb.ingress.kubernetes.io/healthcheck-protocol: HTTP
    alb.ingress.kubernetes.io/healthcheck-port: traffic-port
    alb.ingress.kubernetes.io/healthcheck-path: /
    alb.ingress.kubernetes.io/healthcheck-interval-seconds: '15'
    alb.ingress.kubernetes.io/healthcheck-timeout-seconds: '5'
    alb.ingress.kubernetes.io/healthy-threshold-count: '2'
    alb.ingress.kubernetes.io/unhealthy-threshold-count: '2'
    
    # ロードバランサー設定
    alb.ingress.kubernetes.io/load-balancer-name: eks-webapp-alb
    alb.ingress.kubernetes.io/tags: |
      Environment=production,
      Team=platform,
      Project=webapp
    
    # セキュリティグループ設定
    alb.ingress.kubernetes.io/security-groups: sg-xxxxxxxxx, sg-yyyyyyyyy
    alb.ingress.kubernetes.io/manage-backend-security-group-rules: 'true'
    
    # アクション設定（リダイレクトとレスポンス）
    alb.ingress.kubernetes.io/actions.ssl-redirect: |
      {
        "Type": "redirect",
        "RedirectConfig": {
          "Protocol": "HTTPS",
          "Port": "443",
          "StatusCode": "HTTP_301"
        }
      }
      
    alb.ingress.kubernetes.io/actions.weighted-routing: |
      {
        "type": "forward",
        "forwardConfig": {
          "targetGroups": [
            {
              "serviceName": "api-backend-v1-service",
              "servicePort": 80,
              "weight": 80
            },
            {
              "serviceName": "api-backend-v2-service",
              "servicePort": 80,
              "weight": 20
            }
          ]
        }
      }

spec:
  rules:
  # HTTPからHTTPSへのリダイレクト
  - http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: ssl-redirect
            port:
              name: use-annotation
  
  # メインアプリケーションルーティング
  - host: webapp.example.com
    http:
      paths:
      # フロントエンドアプリケーション
      - path: /
        pathType: Prefix
        backend:
          service:
            name: webapp-frontend-service
            port:
              number: 80
      
      # API v1ルーティング
      - path: /api/v1
        pathType: Prefix
        backend:
          service:
            name: api-backend-v1-service
            port:
              number: 80
      
      # API v2ルーティング  
      - path: /api/v2
        pathType: Prefix
        backend:
          service:
            name: api-backend-v2-service
            port:
              number: 80
              
      # 重み付きルーティング（カナリアデプロイメント用）
      - path: /api/canary
        pathType: Prefix
        backend:
          service:
            name: weighted-routing
            port:
              name: use-annotation

  # API専用サブドメイン
  - host: api.example.com
    http:
      paths:
      - path: /v1
        pathType: Prefix
        backend:
          service:
            name: api-backend-v1-service
            port:
              number: 80
      - path: /v2
        pathType: Prefix
        backend:
          service:
            name: api-backend-v2-service
            port:
              number: 80

  tls:
  - hosts:
    - webapp.example.com
    - api.example.com
    secretName: webapp-tls-secret
---
# AWS WAF統合Ingress（セキュリティ強化版）
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: webapp-secure-ingress
  namespace: webapp
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS": 443}]'
    
    # AWS WAF v2統合
    alb.ingress.kubernetes.io/wafv2-acl-arn: arn:aws:wafv2:us-west-2:ACCOUNT-ID:regional/webacl/webapp-waf/xxxxxxxxx
    
    # AWS Shield Advanced
    alb.ingress.kubernetes.io/shield-advanced-protection: 'true'
    
    # SSL設定
    alb.ingress.kubernetes.io/ssl-policy: ELBSecurityPolicy-TLS-1-2-2017-01
    alb.ingress.kubernetes.io/certificate-arn: arn:aws:acm:us-west-2:ACCOUNT-ID:certificate/CERTIFICATE-ID
    
    # アクセスログ設定
    alb.ingress.kubernetes.io/load-balancer-attributes: |
      access_logs.s3.enabled=true,
      access_logs.s3.bucket=webapp-alb-logs,
      access_logs.s3.prefix=eks-webapp,
      idle_timeout.timeout_seconds=60,
      routing.http2.enabled=true,
      deletion_protection.enabled=true

spec:
  rules:
  - host: secure.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: webapp-frontend-service
            port:
              number: 80
  tls:
  - hosts:
    - secure.example.com
---
# Network Load Balancer設定例
apiVersion: v1
kind: Service
metadata:
  name: webapp-nlb-service
  namespace: webapp
  annotations:
    # NLB固有の設定
    service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
    service.beta.kubernetes.io/aws-load-balancer-scheme: "internet-facing"
    service.beta.kubernetes.io/aws-load-balancer-cross-zone-load-balancing-enabled: "true"
    
    # SSL設定
    service.beta.kubernetes.io/aws-load-balancer-ssl-cert: arn:aws:acm:us-west-2:ACCOUNT-ID:certificate/CERTIFICATE-ID
    service.beta.kubernetes.io/aws-load-balancer-ssl-ports: "443"
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: "tcp"
    
    # プロキシプロトコル
    service.beta.kubernetes.io/aws-load-balancer-proxy-protocol: "*"
    
    # アクセスログ
    service.beta.kubernetes.io/aws-load-balancer-access-log-enabled: "true"
    service.beta.kubernetes.io/aws-load-balancer-access-log-s3-bucket-name: "webapp-nlb-logs"
    service.beta.kubernetes.io/aws-load-balancer-access-log-s3-bucket-prefix: "eks-webapp-nlb"
    
    # セキュリティグループ
    service.beta.kubernetes.io/aws-load-balancer-security-groups: "sg-xxxxxxxxx"
    
    # タグ設定
    service.beta.kubernetes.io/aws-load-balancer-additional-resource-tags: |
      Environment=production,Team=platform,Project=webapp

spec:
  type: LoadBalancer
  selector:
    app: webapp-frontend
  ports:
  - name: http
    port: 80
    targetPort: 80
    protocol: TCP
  - name: https
    port: 443
    targetPort: 80
    protocol: TCP
---
# TargetGroupBinding CRD使用例
apiVersion: elbv2.k8s.aws/v1beta1
kind: TargetGroupBinding
metadata:
  name: webapp-tgb
  namespace: webapp
spec:
  serviceRef:
    name: webapp-frontend-service
    port: 80
  targetGroupARN: arn:aws:elasticloadbalancing:us-west-2:ACCOUNT-ID:targetgroup/webapp-frontend-tg/xxxxxxxxx
  targetType: ip
  
  # ヘルスチェック設定
  healthCheckConfig:
    protocol: HTTP
    path: /health
    port: 80
    intervalSeconds: 15
    timeoutSeconds: 5
    healthyThresholdCount: 2
    unhealthyThresholdCount: 2
---
# カスタムエラーレスポンス設定
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: webapp-error-pages
  namespace: webapp
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS": 443}]'
    
    # カスタムエラーページ設定
    alb.ingress.kubernetes.io/actions.custom-error-response: |
      {
        "Type": "fixed-response",
        "FixedResponseConfig": {
          "ContentType": "text/html",
          "MessageBody": "<html><head><title>503 Service Unavailable</title></head><body><h1>Service Temporarily Unavailable</h1><p>Please try again later.</p></body></html>",
          "StatusCode": "503"
        }
      }
    
    # 条件付きルーティング
    alb.ingress.kubernetes.io/conditions.maintenance-mode: |
      [
        {
          "field": "http-header",
          "httpHeaderConfig": {
            "httpHeaderName": "X-Maintenance-Mode",
            "values": ["true"]
          }
        }
      ]

spec:
  rules:
  - host: webapp.example.com
    http:
      paths:
      # メンテナンスモード時のエラーレスポンス
      - path: /
        pathType: Prefix
        backend:
          service:
            name: custom-error-response
            port:
              name: use-annotation
      
      # 通常のアプリケーション
      - path: /
        pathType: Prefix
        backend:
          service:
            name: webapp-frontend-service
            port:
              number: 80
---
# 複数環境対応（ブルーグリーンデプロイメント）
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: webapp-blue-green
  namespace: webapp
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS": 443}]'
    
    # トラフィック分割設定（ブルーグリーンデプロイメント）
    alb.ingress.kubernetes.io/actions.blue-green-split: |
      {
        "type": "forward",
        "forwardConfig": {
          "targetGroups": [
            {
              "serviceName": "webapp-blue-service",
              "servicePort": 80,
              "weight": 90
            },
            {
              "serviceName": "webapp-green-service",
              "servicePort": 80,
              "weight": 10
            }
          ]
        }
      }
    
    # スティッキーセッション設定
    alb.ingress.kubernetes.io/target-group-attributes: |
      stickiness.enabled=true,
      stickiness.lb_cookie.duration_seconds=86400,
      stickiness.type=lb_cookie

spec:
  rules:
  - host: webapp-bg.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: blue-green-split
            port:
              name: use-annotation
---
# 地理的ルーティング設定（Route 53統合）
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: webapp-geo-routing
  namespace: webapp
  annotations:
    kubernetes.io/ingress.class: alb
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTPS": 443}]'
    
    # Route 53設定
    external-dns.alpha.kubernetes.io/hostname: global.example.com
    external-dns.alpha.kubernetes.io/aws-geolocation-continent-code: "NA"
    external-dns.alpha.kubernetes.io/aws-geolocation-country-code: "US"
    external-dns.alpha.kubernetes.io/set-identifier: "us-west-2"
    external-dns.alpha.kubernetes.io/aws-health-check-id: "xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx"

spec:
  rules:
  - host: global.example.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: webapp-frontend-service
            port:
              number: 80
