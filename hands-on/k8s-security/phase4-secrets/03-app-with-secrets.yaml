# アプリケーションでのSecrets利用演習
# このファイルでは、実際のアプリケーションでSecretsを
# 環境変数やボリュームマウントとして利用する方法を学習します。

---
# データベース接続用のSecrets
apiVersion: v1
kind: Secret
metadata:
  name: database-credentials
  namespace: k8s-security-demo
type: Opaque
data:
  # echo -n "postgres" | base64
  username: cG9zdGdyZXM=
  # echo -n "supersecretpassword" | base64
  password: c3VwZXJzZWNyZXRwYXNzd29yZA==
  # echo -n "sample_db" | base64
  database: c2FtcGxlX2Ri
  # echo -n "postgres.k8s-security-demo.svc.cluster.local" | base64
  host: cG9zdGdyZXMuazhzLXNlY3VyaXR5LWRlbW8uc3ZjLmNsdXN0ZXIubG9jYWw=

---
# API Keys用のSecrets
apiVersion: v1
kind: Secret
metadata:
  name: api-keys
  namespace: k8s-security-demo
type: Opaque
data:
  # echo -n "sk-abcd1234567890efghij" | base64
  openai-api-key: c2stYWJjZDEyMzQ1Njc4OTBlZmdoaWo=
  # echo -n "12345678-abcd-efgh-ijkl-9876543210ab" | base64
  stripe-api-key: MTIzNDU2NzgtYWJjZC1lZmdoLWlqa2wtOTg3NjU0MzIxMGFi

---
# 設定ファイル用のSecrets
apiVersion: v1
kind: Secret
metadata:
  name: app-config-secrets
  namespace: k8s-security-demo
type: Opaque
data:
  # echo -n "jwt-secret-key-for-authentication" | base64
  jwt-secret: and0LXNlY3JldC1rZXktZm9yLWF1dGhlbnRpY2F0aW9u
  # echo -n "AES256-encryption-key-32-chars!!" | base64
  encryption-key: QUVTMTU2LWVuY3J5cHRpb24ta2V5LTMyLWNoYXJzISE=

---
# 環境変数でSecretsを利用するWebアプリ
apiVersion: apps/v1
kind: Deployment
metadata:
  name: webapp-with-secrets
  namespace: k8s-security-demo
spec:
  replicas: 2
  selector:
    matchLabels:
      app: webapp-secrets
  template:
    metadata:
      labels:
        app: webapp-secrets
    spec:
      containers:
      - name: webapp
        image: node:16-alpine
        ports:
        - containerPort: 3000
        # 環境変数としてSecretsを注入
        env:
        - name: DB_USERNAME
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: username
        - name: DB_PASSWORD
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: password
        - name: DB_NAME
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: database
        - name: DB_HOST
          valueFrom:
            secretKeyRef:
              name: database-credentials
              key: host
        - name: OPENAI_API_KEY
          valueFrom:
            secretKeyRef:
              name: api-keys
              key: openai-api-key
        - name: STRIPE_API_KEY
          valueFrom:
            secretKeyRef:
              name: api-keys
              key: stripe-api-key
        # ボリュームマウントでSecretsファイルを利用
        volumeMounts:
        - name: jwt-secret
          mountPath: /app/secrets/jwt
          readOnly: true
        - name: encryption-key
          mountPath: /app/secrets/encryption
          readOnly: true
        command:
        - /bin/sh
        - -c
        - |
          cat > /app/server.js << 'EOF'
          const http = require('http');
          const fs = require('fs');
          
          // 環境変数からSecretsを取得
          const dbConfig = {
            username: process.env.DB_USERNAME,
            password: process.env.DB_PASSWORD,
            database: process.env.DB_NAME,
            host: process.env.DB_HOST
          };
          
          const apiKeys = {
            openai: process.env.OPENAI_API_KEY,
            stripe: process.env.STRIPE_API_KEY
          };
          
          // ファイルからSecretsを読み取り
          let jwtSecret, encryptionKey;
          try {
            jwtSecret = fs.readFileSync('/app/secrets/jwt/jwt-secret', 'utf8');
            encryptionKey = fs.readFileSync('/app/secrets/encryption/encryption-key', 'utf8');
          } catch (err) {
            console.error('Secretsファイルの読み取りエラー:', err.message);
          }
          
          const server = http.createServer((req, res) => {
            res.setHeader('Content-Type', 'application/json');
            
            if (req.url === '/health') {
              res.writeHead(200);
              res.end(JSON.stringify({ status: 'healthy' }));
            } else if (req.url === '/config') {
              // セキュリティ上、実際の値は表示せず、存在確認のみ
              const config = {
                database: {
                  hasUsername: !!dbConfig.username,
                  hasPassword: !!dbConfig.password,
                  database: dbConfig.database,
                  host: dbConfig.host
                },
                apiKeys: {
                  hasOpenAI: !!apiKeys.openai,
                  hasStripe: !!apiKeys.stripe
                },
                secrets: {
                  hasJwtSecret: !!jwtSecret,
                  hasEncryptionKey: !!encryptionKey
                }
              };
              res.writeHead(200);
              res.end(JSON.stringify(config, null, 2));
            } else {
              res.writeHead(404);
              res.end(JSON.stringify({ error: 'Not Found' }));
            }
          });
          
          server.listen(3000, () => {
            console.log('サーバーがポート3000で起動しました');
            console.log('利用可能なエンドポイント:');
            console.log('- GET /health - ヘルスチェック');
            console.log('- GET /config - 設定情報（Secrets存在確認）');
          });
          EOF
          
          cd /app && node server.js
        resources:
          requests:
            memory: "64Mi"
            cpu: "50m"
          limits:
            memory: "128Mi"
            cpu: "100m"
      volumes:
      - name: jwt-secret
        secret:
          secretName: app-config-secrets
          items:
          - key: jwt-secret
            path: jwt-secret
      - name: encryption-key
        secret:
          secretName: app-config-secrets
          items:
          - key: encryption-key
            path: encryption-key

---
# WebアプリのService
apiVersion: v1
kind: Service
metadata:
  name: webapp-secrets-service
  namespace: k8s-security-demo
spec:
  selector:
    app: webapp-secrets
  ports:
  - port: 80
    targetPort: 3000
  type: ClusterIP

---
# Secretsの利用をテストするPod
apiVersion: v1
kind: Pod
metadata:
  name: secrets-test-client
  namespace: k8s-security-demo
  labels:
    app: secrets-test
spec:
  containers:
  - name: test-client
    image: curlimages/curl:latest
    command:
    - /bin/sh
    - -c
    - |
      echo "=== Webアプリケーションでのсекretс利用テスト ==="
      
      # アプリの起動を待機
      echo "Webアプリの起動を待機しています..."
      for i in {1..30}; do
        if curl -s http://webapp-secrets-service.k8s-security-demo.svc.cluster.local/health > /dev/null; then
          echo "Webアプリが起動しました！"
          break
        fi
        echo "待機中... ($i/30)"
        sleep 2
      done
      
      # ヘルスチェック
      echo "1. ヘルスチェック:"
      curl -s http://webapp-secrets-service.k8s-security-demo.svc.cluster.local/health | jq .
      
      # 設定情報の確認
      echo "2. Secrets設定の確認:"
      curl -s http://webapp-secrets-service.k8s-security-demo.svc.cluster.local/config | jq .
      
      # 無限ループでPodを維持
      while true; do sleep 3600; done
    resources:
      requests:
        memory: "32Mi"
        cpu: "10m"
      limits:
        memory: "64Mi"
        cpu: "50m"
  restartPolicy: Always
